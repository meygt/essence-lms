version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lms-postgres
    environment:
      POSTGRES_DB: lms_db
      POSTGRES_USER: lms_user
      POSTGRES_PASSWORD: lms_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lms_user -d lms_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: lms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lms-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lms-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/lms_db
      SPRING_DATASOURCE_USERNAME: lms_user
      SPRING_DATASOURCE_PASSWORD: lms_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lms-network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Admin Panel (React)
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: lms-admin-panel
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
      REACT_APP_ENVIRONMENT: docker
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - lms-network
    restart: unless-stopped
    volumes:
      - ./admin-panel/nginx.conf:/etc/nginx/nginx.conf:ro

  # Client Side (React)
  client-side:
    build:
      context: ./client-side
      dockerfile: Dockerfile
    container_name: lms-client-side
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
      REACT_APP_ENVIRONMENT: docker
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - lms-network
    restart: unless-stopped
    volumes:
      - ./client-side/nginx.conf:/etc/nginx/nginx.conf:ro

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: lms-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./shared/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./shared/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - admin-panel
      - client-side
    networks:
      - lms-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  lms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16